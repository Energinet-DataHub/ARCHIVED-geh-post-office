<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GreenEnergyHub.Messaging.Protobuf</name>
    </assembly>
    <members>
        <member name="T:GreenEnergyHub.Messaging.Protobuf.ProtobufInboundMapper">
            <summary>
            Map from <see cref="T:Google.Protobuf.IMessage"/> to application message
            </summary>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Protobuf.ProtobufInboundMapper.Convert(Google.Protobuf.IMessage)">
            <summary>
            Convert to application message
            </summary>
            <param name="obj"><see cref="T:Google.Protobuf.IMessage"/> to be converted</param>
            <returns>The encoded <see cref="T:GreenEnergyHub.Messaging.Transport.IInboundMessage"/></returns>
        </member>
        <member name="T:GreenEnergyHub.Messaging.Protobuf.ProtobufInboundMapperFactory">
            <summary>
            Helper class to find a registered map
            </summary>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Protobuf.ProtobufInboundMapperFactory.#ctor(System.IServiceProvider)">
            <summary>
            Create a Mapper factory
            </summary>
            <param name="serviceProvider">The current service provider</param>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Protobuf.ProtobufInboundMapperFactory.GetMapper(System.Type)">
            <summary>
            Get a <see cref="T:GreenEnergyHub.Messaging.Protobuf.ProtobufInboundMapper"/> from the DI system
            </summary>
            <param name="typeOfMessage">Message type to locate mapper for</param>
            <returns>Mapper for the type</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="typeOfMessage"></paramref> is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException">no mapper is found for <paramref name="typeOfMessage"/></exception>
        </member>
        <member name="T:GreenEnergyHub.Messaging.Protobuf.ProtobufInboundMapper`1">
            <summary>
            Convert a proto buf contract
            </summary>
            <typeparam name="TMessage">Proto buf contract</typeparam>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Protobuf.ProtobufInboundMapper`1.Convert(Google.Protobuf.IMessage)">
            <summary>
            Convert an <see cref="T:Google.Protobuf.IMessage"/> to <see cref="T:GreenEnergyHub.Messaging.Transport.IInboundMessage"/>
            </summary>
            <param name="obj">Proto buf payload</param>
            <returns>The converted application message</returns>
            <exception cref="T:System.InvalidOperationException">If <paramref name="obj"></paramref> is not of <typeparamref name="TMessage"></typeparamref> type</exception>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Protobuf.ProtobufInboundMapper`1.Convert(`0)">
            <summary>
            Convert proto buf contract
            </summary>
            <param name="obj">Contract to convert</param>
            <returns>Application message</returns>
        </member>
        <member name="T:GreenEnergyHub.Messaging.Protobuf.ProtobufMessageDeserializer">
            <summary>
            Deserializes a payload with Proto buf format
            </summary>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Protobuf.ProtobufMessageDeserializer.#ctor(GreenEnergyHub.Messaging.Protobuf.ProtobufInboundMapperFactory,GreenEnergyHub.Messaging.Protobuf.ProtobufParser)">
            <summary>
            Create a <see cref="T:GreenEnergyHub.Messaging.Protobuf.ProtobufMessageDeserializer"/>
            </summary>
            <param name="inboundMapperFactory"></param>
            <param name="parser"></param>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Protobuf.ProtobufMessageDeserializer.FromBytesAsync(System.Byte[],System.Threading.CancellationToken)">
            <inheritdoc cref="T:GreenEnergyHub.Messaging.Transport.MessageDispatcher"/>
        </member>
        <member name="T:GreenEnergyHub.Messaging.Protobuf.ProtobufMessageSerializer">
            <summary>
            Serialize a message in proto buf format
            </summary>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Protobuf.ProtobufMessageSerializer.#ctor(GreenEnergyHub.Messaging.Protobuf.ProtobufOutboundMapperFactory)">
            <summary>
            Create a serializer
            </summary>
            <param name="outboundMapperFactory">Mapper factory</param>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Protobuf.ProtobufMessageSerializer.ToBytesAsync(GreenEnergyHub.Messaging.Transport.IOutboundMessage,System.Threading.CancellationToken)">
            <inheritdoc cref="T:GreenEnergyHub.Messaging.Transport.MessageSerializer"/>
        </member>
        <member name="T:GreenEnergyHub.Messaging.Protobuf.ProtobufOutboundMapper">
            <summary>
            Maps an object to proto buf <see cref="T:Google.Protobuf.IMessage"/>
            </summary>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Protobuf.ProtobufOutboundMapper.Convert(GreenEnergyHub.Messaging.Transport.IOutboundMessage)">
            <summary>
            Map application message to protobuf
            </summary>
            <param name="obj">Object to map</param>
            <returns>Proto buf message</returns>
        </member>
        <member name="T:GreenEnergyHub.Messaging.Protobuf.ProtobufOutboundMapperFactory">
            <summary>
            Helper class to locate mapper
            </summary>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Protobuf.ProtobufOutboundMapperFactory.#ctor(System.IServiceProvider)">
            <summary>
            Create a mapper factory
            </summary>
            <param name="serviceProvider">Current service provider</param>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Protobuf.ProtobufOutboundMapperFactory.GetMapper(GreenEnergyHub.Messaging.Transport.IOutboundMessage)">
            <summary>
            Find a mapper for a type
            </summary>
            <param name="message">Message to locate mapper for</param>
            <returns>Located mapper</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException">no mapper found</exception>
        </member>
        <member name="T:GreenEnergyHub.Messaging.Protobuf.ProtobufOutboundMapper`1">
            <summary>
            Generic proto buf mapper
            </summary>
            <typeparam name="T">Proto buf contract</typeparam>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Protobuf.ProtobufOutboundMapper`1.Convert(GreenEnergyHub.Messaging.Transport.IOutboundMessage)">
            <summary>
            Convert an <see cref="T:GreenEnergyHub.Messaging.Transport.IOutboundMessage"/> to proto buf contract
            </summary>
            <param name="obj">Message to map</param>
            <returns>Converted message</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="obj"/> is not of <typeparamref name="T"> type</typeparamref></exception>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Protobuf.ProtobufOutboundMapper`1.Convert(`0)">
            <summary>
            Convert to a proto buf contract
            </summary>
            <param name="obj">Application object to map</param>
            <returns>Converted proto buf contract</returns>
        </member>
        <member name="T:GreenEnergyHub.Messaging.Protobuf.ProtobufParser">
            <summary>
            Parser for protobuf
            </summary>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Protobuf.ProtobufParser.Parse(System.Byte[])">
            <summary>
            Create an <see cref="T:Google.Protobuf.IMessage"/> from a payload
            </summary>
            <param name="data">payload containing the <see cref="T:Google.Protobuf.IMessage"/></param>
            <returns>Message from the payload</returns>
        </member>
    </members>
</doc>
