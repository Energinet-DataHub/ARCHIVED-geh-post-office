<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GreenEnergyHub.Messaging</name>
    </assembly>
    <members>
        <member name="T:GreenEnergyHub.Messaging.Dispatching.BaseRequestHandler`2">
            <summary>
            Ties system to <a href="https://github.com/jbogard/MediatR">MediatR</a>.
            </summary>
            <typeparam name="TRequest">The request to handle</typeparam>
            <typeparam name="TResponse">The response</typeparam>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Dispatching.HubCommandHandler`1.OnErrorAsync(System.Exception)">
            <summary>
            Called when the handle method experiences an unexpected exception.
            </summary>
            <param name="innerException">The exception that was thrown during Handle().</param>
        </member>
        <member name="T:GreenEnergyHub.Messaging.Dispatching.HubRequestHandler`1">
            <summary>
            A Handler for <see cref="T:GreenEnergyHub.Messaging.Dispatching.BaseRequestHandler`2"/>.
            </summary>
            <typeparam name="TRequest">The <see cref="T:GreenEnergyHub.Messaging.IHubMessage"/> to handle.</typeparam>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Dispatching.HubRequestHandler`1.ValidateAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Validate any properties of the message before accepting.
            </summary>
            <param name="request">The message.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>True if it is a valid message.</returns>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Dispatching.HubRequestHandler`1.AcceptAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Accept the message and perform any stateful data transformation,
            system updating, etc.
            </summary>
            <param name="request">The message.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>True if message successfully accepted.</returns>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Dispatching.HubRequestHandler`1.RespondAsync(`0,System.Threading.CancellationToken)">
            <summary>
            Send information about acceptance and validity to some outside
            observer.
            </summary>
            <param name="request">The message.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A HubActionResponse.</returns>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Dispatching.HubRequestHandler`1.OnErrorAsync(System.Exception)">
            <summary>
            Called when the handle method experiences an unexpected exception.
            </summary>
            <param name="innerException">The exception that was thrown during Handle().</param>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Dispatching.HubRequestHandler`1.HandleAsync(`0,System.Threading.CancellationToken)">
             <summary>
             The default way to handle requests: Validate, Accept, and Respond.
            
             We recommend an abstract class like this one to allow for similar
             behaviors to reuse code.
             </summary>
             <param name="request">The message to handle.</param>
             <param name="cancellationToken">A cancellationToken.</param>
             <returns>An IHubActionResponse.</returns>
        </member>
        <member name="T:GreenEnergyHub.Messaging.Dispatching.HubRequestMediator">
            <inheritdoc cref="T:GreenEnergyHub.Messaging.Dispatching.IHubRequestMediator"/>
        </member>
        <member name="T:GreenEnergyHub.Messaging.Dispatching.IHubCommandMediator">
            <summary>
            Dispatch a command
            </summary>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Dispatching.IHubCommandMediator.DispatchAsync``1(``0)">
            <summary>
            Dispatch a command to a <see cref="T:GreenEnergyHub.Messaging.Dispatching.HubCommandHandler`1"/>
            </summary>
            <param name="command">Command to dispatch</param>
            <typeparam name="TCommand">Type of command</typeparam>
        </member>
        <member name="T:GreenEnergyHub.Messaging.Dispatching.IHubMessageBulkMediator">
            <summary>
            Dispatches a collection of <see cref="T:GreenEnergyHub.Messaging.IHubMessage"/>
            </summary>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Dispatching.IHubMessageBulkMediator.DispatchAsync(System.Collections.Generic.IEnumerable{GreenEnergyHub.Messaging.IHubMessage})">
            <summary>
            Dispatches a collection of <see cref="T:GreenEnergyHub.Messaging.IHubMessage"/>
            </summary>
            <param name="hubRequests">Collection of hub requests to dispatch</param>
            <returns>A <see cref="T:GreenEnergyHub.Messaging.IHubResponse"/></returns>
        </member>
        <member name="T:GreenEnergyHub.Messaging.Dispatching.IHubRequestMediator">
            <summary>
            Dispatch a <see cref="T:GreenEnergyHub.Messaging.IHubMessage"/>
            </summary>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Dispatching.IHubRequestMediator.DispatchAsync``1(``0)">
            <summary>
            Dispatch a request
            </summary>
            <param name="request">Request to dispatch</param>
            <typeparam name="TRequest">Request type</typeparam>
            <returns>Response from the dispatch</returns>
        </member>
        <member name="M:GreenEnergyHub.Messaging.FluentHybridRuleEngine`1.#ctor(GreenEnergyHub.Messaging.Validation.RuleCollection{`0},GreenEnergyHub.Messaging.Validation.ServiceProviderDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:GreenEnergyHub.Messaging.FluentHybridRuleEngine`1"/> class.
            </summary>
        </member>
        <member name="M:GreenEnergyHub.Messaging.FluentHybridRuleEngine`1.ValidateAsync(`0)">
            <inheritdoc cref="T:GreenEnergyHub.Messaging.IRuleEngine`1"/>
        </member>
        <member name="M:GreenEnergyHub.Messaging.HubResponse.#ctor">
            <summary>
            A successful HubActionResponse.
            </summary>
        </member>
        <member name="M:GreenEnergyHub.Messaging.HubResponse.#ctor(System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            A configurable HubActionResponse.
            </summary>
            <param name="isSuccessful">Whether the action was successful.</param>
            <param name="errors">A list of any errors encountered.
            Defaults to null.</param>
        </member>
        <member name="P:GreenEnergyHub.Messaging.HubResponse.IsSuccessful">
            <summary>
            Whether the action was successful.
            </summary>
            <value>True if the action was successful. Defaults to false.</value>
        </member>
        <member name="P:GreenEnergyHub.Messaging.HubResponse.Errors">
            <summary>
            A list of any errors encountered.
            </summary>
            <value>The list of errors. Empty by default.</value>
        </member>
        <member name="T:GreenEnergyHub.Messaging.IHubMessage">
            <summary>
            Represents a message in the Green Energy Hub.
            </summary>
        </member>
        <member name="P:GreenEnergyHub.Messaging.IHubMessage.Transaction">
            <summary>
            A unique id for this request.
            </summary>
            <value>A string.</value>
        </member>
        <member name="P:GreenEnergyHub.Messaging.IHubMessage.RequestDate">
            <summary>
            The date the message was sent.
            </summary>
            <value>A DateTime.</value>
        </member>
        <member name="T:GreenEnergyHub.Messaging.IHubRehydrator">
            <summary>
            Rehydrates an object from a stream
            </summary>
        </member>
        <member name="M:GreenEnergyHub.Messaging.IHubRehydrator.RehydrateAsync(System.IO.Stream,System.Type)">
            <summary>
            Rehydrate a message
            </summary>
            <param name="message"><see cref="T:System.IO.Stream"/> containing the message</param>
            <param name="messageType">Message type to rehydrate</param>
            <returns>If the message type is known and the message content valid a <see cref="T:GreenEnergyHub.Messaging.IHubMessage"/> else null</returns>
        </member>
        <member name="M:GreenEnergyHub.Messaging.IHubRehydrator.RehydrateCollectionAsync(System.IO.Stream,System.Type)">
            <summary>
            Rehydrates a collection of hub requests
            </summary>
            <param name="message"><see cref="T:System.IO.Stream"/> containing the message</param>
            <param name="messageType">Message type to rehydrate</param>
            <returns>A collection of <see cref="T:GreenEnergyHub.Messaging.IHubMessage"/></returns>
        </member>
        <member name="T:GreenEnergyHub.Messaging.IHubResponse">
            <summary>
            Represents a response from Green Energy Hub
            </summary>
        </member>
        <member name="P:GreenEnergyHub.Messaging.IHubResponse.IsSuccessful">
            <summary>
            Whether the action was successful.
            </summary>
            <value>True if the action was successful. Defaults to false.</value>
        </member>
        <member name="P:GreenEnergyHub.Messaging.IHubResponse.Errors">
            <summary>
            A list of any errors encountered.
            </summary>
            <value>The list of errors. Empty by default.</value>
        </member>
        <member name="T:GreenEnergyHub.Messaging.IRuleEngine`1">
            <summary>
            This provides an common interface for validation of messages of type
            TMessage that must be implemented for each concrete IRulesEngine
            implementation with the required logic to trigger that rule engine's execution.
            </summary>
        </member>
        <member name="M:GreenEnergyHub.Messaging.IRuleEngine`1.ValidateAsync(`0)">
            <summary>
            Validates the provided message asynchronously.
            </summary>
            <param name="message">The message to validate.</param>
            <returns>
            Returns a <see cref="T:GreenEnergyHub.Messaging.Validation.RuleResultCollection"/> indicating whether or not the validation was a success.
            If the validation was unsuccessful, the <see cref="T:GreenEnergyHub.Messaging.Validation.RuleResultCollection"/> contains a list of error messages.
            </returns>
        </member>
        <member name="T:GreenEnergyHub.Messaging.MessageRouting.HubMessageTypeMap">
            <summary>
            A class which maps the relationship between category and MessageType.
            </summary>
        </member>
        <member name="M:GreenEnergyHub.Messaging.MessageRouting.HubMessageTypeMap.GetTypeByCategory(System.String)">
            <summary>
            Retrieves an IHubMessage for the given category if one exists.
            </summary>
            <param name="category">The category.</param>
            <returns>An IHubMessage type if it exists: null otherwise.
            </returns>
        </member>
        <member name="T:GreenEnergyHub.Messaging.MessageRouting.IHubMessageTypeMap">
            <summary>
            Holds a mapping from category to IHubMessage type.
            </summary>
        </member>
        <member name="M:GreenEnergyHub.Messaging.MessageRouting.IHubMessageTypeMap.GetTypeByCategory(System.String)">
            <summary>
            Uses a mapping to retrieve an IHubMessage type from a given
            category.
            </summary>
            <param name="category">The string category.</param>
            <returns>An IHubMessage type.</returns>
        </member>
        <member name="T:GreenEnergyHub.Messaging.MessageTypes.Common.MarketDocument">
            <summary>
            Market Document Properties
            </summary>
        </member>
        <member name="P:GreenEnergyHub.Messaging.MessageTypes.Common.MarketDocument.MRID">
            <summary>
            Market Document ID.
            This corresponds to the "Identification" element within "HeaderEnergyDocument" in RSM-012 time series.
            </summary>
        </member>
        <member name="P:GreenEnergyHub.Messaging.MessageTypes.Common.MarketDocument.Type">
            <summary>
            What type the received message is eg. E66.
            </summary>
        </member>
        <member name="P:GreenEnergyHub.Messaging.MessageTypes.Common.MarketDocument.CreatedDateTime">
            <summary>
            Time of when the time series was created
            </summary>
        </member>
        <member name="P:GreenEnergyHub.Messaging.MessageTypes.Common.MarketDocument.SenderMarketParticipant">
            <summary>
            The ID and Type of the sender of the time series message
            </summary>
        </member>
        <member name="P:GreenEnergyHub.Messaging.MessageTypes.Common.MarketDocument.RecipientMarketParticipant">
            <summary>
            The ID and Type of the recipient of the time series
            </summary>
        </member>
        <member name="P:GreenEnergyHub.Messaging.MessageTypes.Common.MarketDocument.ProcessType">
            <summary>
            This is a business reason code. It informs you about the context the RSM-message is used in.
            E.g. a RSM-012 time series with code EnergyBusinessProcess = 'D42' is a time series for a flex metering point.
            </summary>
        </member>
        <member name="P:GreenEnergyHub.Messaging.MessageTypes.Common.MarketDocument.MarketServiceCategoryKind">
            <summary>
            Sector area information, e.g. the value E23 is for electricity.
            </summary>
        </member>
        <member name="P:GreenEnergyHub.Messaging.MessageTypes.Common.MarketParticipant.Type">
            <summary>
            Process Role information for market participant, eg. MDR.
            </summary>
        </member>
        <member name="T:GreenEnergyHub.Messaging.MessageTypes.IHubMessageHasBalanceResponsibleParty">
            <summary>
            An interface representing an object which has a <see cref="P:GreenEnergyHub.Messaging.MessageTypes.IHubMessageHasBalanceResponsibleParty.BalanceResponsibleParty"/> field.
            </summary>
        </member>
        <member name="P:GreenEnergyHub.Messaging.MessageTypes.IHubMessageHasBalanceResponsibleParty.BalanceResponsibleParty">
            <summary>
            The balance responsible party field
            </summary>
        </member>
        <member name="T:GreenEnergyHub.Messaging.MessageTypes.IHubMessageHasConsumer">
            <summary>
            An interface representing an object which has a Consumer field.
            </summary>
        </member>
        <member name="P:GreenEnergyHub.Messaging.MessageTypes.IHubMessageHasConsumer.Consumer">
            <summary>
            The consumer field.
            </summary>
        </member>
        <member name="T:GreenEnergyHub.Messaging.MessageTypes.IHubMessageHasEnergySupplier">
            <summary>
            An interface representing an object which has a energy supplier field.
            </summary>
        </member>
        <member name="P:GreenEnergyHub.Messaging.MessageTypes.IHubMessageHasEnergySupplier.EnergySupplier">
            <summary>
            The energy supplier field
            </summary>
        </member>
        <member name="T:GreenEnergyHub.Messaging.MessageTypes.IHubMessageHasMarketEvaluationPoint">
            <summary>
            An interface representing an object which has a <see cref="P:GreenEnergyHub.Messaging.MessageTypes.IHubMessageHasMarketEvaluationPoint.MarketEvaluationPoint"/> field.
            </summary>
        </member>
        <member name="P:GreenEnergyHub.Messaging.MessageTypes.IHubMessageHasMarketEvaluationPoint.MarketEvaluationPoint">
            <summary>
            The market evaluation point field
            </summary>
        </member>
        <member name="T:GreenEnergyHub.Messaging.MessageTypes.IHubMessageHasStartDate">
            <summary>
            An interface representing an object which has a <see cref="P:GreenEnergyHub.Messaging.MessageTypes.IHubMessageHasStartDate.StartDate"/> field.
            </summary>
        </member>
        <member name="P:GreenEnergyHub.Messaging.MessageTypes.IHubMessageHasStartDate.StartDate">
            <summary>
            The start date field
            </summary>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Validation.PropertyBuilder`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}},System.Collections.Generic.List{System.Action{GreenEnergyHub.Messaging.Validation.ServiceProviderDelegate,FluentValidation.AbstractValidator{`0}}})">
            <summary>
            Creates a new builder
            </summary>
            <param name="selector">Property selector</param>
            <param name="tracking">Tracking list of validators to apply to the selector</param>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Validation.PropertyBuilder`2.PropertyRule``1">
            <summary>
            Assign a rule to a property.
            </summary>
            <typeparam name="TValidator">The type of validator to assign to a given property</typeparam>
            <exception cref="T:System.InvalidOperationException">Thrown if the type of the <typeparamref name="TValidator"/> is not found in the service provider.</exception>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Validation.PropertyBuilder`2.RuleCollection``1">
            <summary>
            Assign a rule to a property
            </summary>
            <typeparam name="TCollection">Collection of rules to assign</typeparam>
            <exception cref="T:System.InvalidOperationException">If the validator is not registered within the service provider</exception>
        </member>
        <member name="T:GreenEnergyHub.Messaging.Validation.PropertyCollectionBuilder`2">
            <summary>
            A builder for properties that implement <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <typeparam name="T">class that contains the property</typeparam>
            <typeparam name="TProperty">property type to validate</typeparam>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Validation.PropertyCollectionBuilder`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{`1}}},System.Collections.Generic.List{System.Action{GreenEnergyHub.Messaging.Validation.ServiceProviderDelegate,FluentValidation.AbstractValidator{`0}}})">
            <summary>
            Creates a new builder
            </summary>
            <param name="selector">selector for the property</param>
            <param name="tracking">a list of rules to apply to the current validator</param>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Validation.PropertyCollectionBuilder`2.PropertyRule``1">
            <summary>
            Assign a validator to the selector
            </summary>
            <typeparam name="TValidator">Validator to assign</typeparam>
            <exception cref="T:System.InvalidOperationException">If the <see cref="M:GreenEnergyHub.Messaging.Validation.PropertyCollectionBuilder`2.PropertyRule``1"/> is not registered within the service provider</exception>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Validation.PropertyCollectionBuilder`2.RuleCollection``1">
            <summary>
            Assign a validator to the selector
            </summary>
            <typeparam name="TCollection">Validator to assign for the collection</typeparam>
            <exception cref="T:System.InvalidOperationException">If the <see cref="M:GreenEnergyHub.Messaging.Validation.PropertyCollectionBuilder`2.PropertyRule``1"/> is not registered within the service provider</exception>
        </member>
        <member name="T:GreenEnergyHub.Messaging.Validation.PropertyRule">
            <summary>
            Base class for a property validation
            </summary>
        </member>
        <member name="P:GreenEnergyHub.Messaging.Validation.PropertyRule.Code">
            <summary>
            Code identifying the validation
            </summary>
        </member>
        <member name="T:GreenEnergyHub.Messaging.Validation.PropertyRule`1">
            <summary>
            The class is used to validate a single property
            </summary>
            <typeparam name="T">PropertyType to validate</typeparam>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Validation.PropertyRule`1.IsValid(FluentValidation.Validators.PropertyValidatorContext)">
            <summary>
            Validates the property - this is the contract from FluentValidation
            </summary>
            <param name="context">context describing what is being validated</param>
            <returns><c>true</c> if successful, else <c>false</c></returns>
            <exception cref="T:System.ArgumentNullException">if <paramref name="context"/> is null</exception>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Validation.PropertyRule`1.IsValid(`0,FluentValidation.Validators.PropertyValidatorContext)">
            <summary>
            Validates the property value
            </summary>
            <param name="propertyValue">Value to validate</param>
            <param name="context">The context for the property</param>
            <returns><c>true</c> if successful, else <c>false</c></returns>
        </member>
        <member name="T:GreenEnergyHub.Messaging.Validation.RuleCollection`1">
            <summary>
            A <see cref="T:GreenEnergyHub.Messaging.Validation.RuleCollection`1"/> serves as the root for input validation.
            This class configures the rules for properties on <typeparam name="T"></typeparam>.
            <example>
            This sample shows how to specify rules for a DTO
            <code>
            class ChangeSupplierValidation : RuleCollection&lt;ChangeSupplier&gt; {
                public ChangeSupplierValidation() {
                    RuleFor(p => p.MarketEvaluationPointMrid)
                        .Use&lt;MarketEvaluationPointMrid&gt;();
                }
            }
            </code>
            </example>
            </summary>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Validation.RuleCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GreenEnergyHub.Messaging.Validation.RuleCollection`1"/> class.
            </summary>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Validation.RuleCollection`1.ValidateAsync(FluentValidation.ValidationContext{`0},GreenEnergyHub.Messaging.Validation.ServiceProviderDelegate)">
            <summary>
            Validates the <see cref="T:FluentValidation.ValidationContext`1"/> asynchronous
            </summary>
            <param name="context">instance to validate</param>
            <param name="serviceProviderDelegate">the delegate to resolve instances from</param>
            <returns>
            Returns a <see cref="T:GreenEnergyHub.Messaging.Validation.RuleResultCollection"/> indicating whether or not the validation was a success.
            If the validation was unsuccessful, the <see cref="T:GreenEnergyHub.Messaging.Validation.RuleResultCollection"/> contains a list of error messages.
            </returns>
            <exception cref="T:System.ArgumentNullException">if <paramref name="context"/> or <paramref name="serviceProviderDelegate"/> is null</exception>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Validation.RuleCollection`1.GetValidator(GreenEnergyHub.Messaging.Validation.ServiceProviderDelegate)">
            <summary>
            Gets the current validator
            </summary>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Validation.RuleCollection`1.RuleFor``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Defines a validation rule for a property
            </summary>
            <param name="selector">Property selection</param>
            <typeparam name="TProperty">The type of property being validated</typeparam>
            <exception cref="T:System.ArgumentNullException">Thrown if the provided <paramref name="selector"/> is null.</exception>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Validation.RuleCollection`1.RuleForEach``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}})">
            <summary>
            Defines a validation rule for a property collection
            </summary>
            <param name="selector">Property collection selection</param>
            <typeparam name="TProperty">The type of property being validated</typeparam>
            <exception cref="T:System.ArgumentNullException">Thrown if the provided <paramref name="selector"/> is null.</exception>
        </member>
        <member name="T:GreenEnergyHub.Messaging.Validation.RuleResult">
            <summary>
            Result for a negative validation rule
            </summary>
        </member>
        <member name="P:GreenEnergyHub.Messaging.Validation.RuleResult.RuleNumber">
            <summary>
            Gets rule number that failed
            </summary>
        </member>
        <member name="P:GreenEnergyHub.Messaging.Validation.RuleResult.Message">
            <summary>
            Gets validation message
            </summary>
        </member>
        <member name="T:GreenEnergyHub.Messaging.Validation.RuleResultCollection">
            <summary>
            A collection of failed validations
            </summary>
        </member>
        <member name="P:GreenEnergyHub.Messaging.Validation.RuleResultCollection.Count">
            <summary>
            Number of failed validations
            </summary>
        </member>
        <member name="P:GreenEnergyHub.Messaging.Validation.RuleResultCollection.Success">
            <summary>
            <c>true</c> if the validation did not fail
            </summary>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Validation.RuleResultCollection.GetEnumerator">
            <inheritdoc cref="T:System.Collections.Generic.IReadOnlyCollection`1"/>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Validation.RuleResultCollection.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="T:System.Collections.Generic.IReadOnlyCollection`1"/>
        </member>
        <member name="M:GreenEnergyHub.Messaging.Validation.RuleResultCollection.From(System.Collections.Generic.IEnumerable{GreenEnergyHub.Messaging.Validation.RuleResult})">
            <summary>
            Create a <see cref="T:GreenEnergyHub.Messaging.Validation.RuleResultCollection"/> from a <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:GreenEnergyHub.Messaging.Validation.RuleResult"/>
            </summary>
            <param name="results">Collection of <see cref="T:GreenEnergyHub.Messaging.Validation.RuleResult"/></param>
            <returns><see cref="T:GreenEnergyHub.Messaging.Validation.RuleResultCollection"/> containing <paramref name="results"/></returns>
        </member>
        <member name="T:GreenEnergyHub.Messaging.Validation.ServiceProviderDelegate">
            <summary>
            Get an instance of a given <see cref="T:System.Type"/> via the designated service provider (dependency container).
            </summary>
            <param name="serviceType">The type to retrieve.</param>
        </member>
    </members>
</doc>
